*snowdrop.txt*		Vim で libclang を使用したプラグインです。

==============================================================================
目次						*snowdrop-contents*

概要				|snowdrop-introduction|
インターフェース		|snowdrop-interface|
  コマンド			  |snowdrop-commands|
  関数				  |snowdrop-functions|
設定				|snowdrop-setting|
  snowdrop の変数		  |snowdrop-variables|



==============================================================================
概要						*snowdrop-introduction*

Clang の libclang を利用したプラグインです。

Requirement:
	Clang 3.3 - http://llvm.org/releases/3.3/tools/clang/docs/ReleaseNotes.html
	|+python|


==============================================================================
インターフェース				*snowdrop-interface*

------------------------------------------------------------------------------
コマンド					*snowdrop-commands*

:SnowdropGotoDefinition				*:SnowdropGotoDefinition*
	カーソルの宣言位置へと移動します。
	この時に別のファイルを開く場合は |g:snowdrop#goto_definition_open_cmd|
	に設定されているコマンドを使用して開かれます。

:SnowdropEchoTypeof				*:SnowdropEchoTypeof*
	カーソル下の型情報を出力します。

:SnowdropEchoResultTypeof			*:SnowdropEchoResultTypeof*
	カーソル下の関数の戻り値型情報を出力します。

:SnowdropEchoIncludes				*:SnowdropEchoIncludes*
	現在のバッファがインクルードしているヘッダーファイルの一覧を出力しま
	す。

------------------------------------------------------------------------------
関数						*snowdrop-functions*

snowdrop#get_libclang_filename()		*snowdrop#get_libclang_filename()*
	読み込まれる libclang のファイルパスを返します。
	これは |g:snowdrop#libclang_path| や |g:snowdrop#libclang_file| の
	設定に依存します。
	また、|g:snowdrop#libclang_file| が空の文字列であれば環境によって自動
	的にファイル名が決定されます。

	MacOS    : "libclang.dylib"
	Windows  : "libclang.dll"
	それ以外 : "libclang.so"

Example: >
	" Windows の場合
	echo snowdrop#get_libclang_filename()
	" => libclang.dll
<

snowdrop#get_libclang_version([{libclang}])	*snowdrop#get_libclang_version()*
	{libclang} のバージョンを返す。
	引数がなければ |snowdrop#get_libclang()| が使用される。
	また、これは |+python| がなくても動作する。
Example: >
	echo snowdrop#get_libclang_version()
	" => clang version 3.3 (tags/RELEASE_33/final)
<
snowdrop#current_includes([{context}])		*snowdrop#current_includes()*
	カレントバッファで include が行われているファイルのリストを返します。
	これは再帰的に全てのインクルードファイルを検索します。


snowdrop#definition_in_cursor()			*snowdrop#definition_in_cursor()*
	カーソルの宣言位置を次の3つの要素を持つリストで返します。
		[filename, line, col]

					*snowdrop#goto_definition_in_cursor()*
snowdrop#goto_definition_in_cursor([{opencmd}, {context}])
	カーソル位置の宣言場所へ移動する。
	{opencmd} は宣言場所のファイルを開く際のコマンドになる。
	デフォルトでは |g:snowdrop#goto_definition_open_cmd| が使用される。


snowdrop#ballonexpr_typeof()			*snowdrop#ballonexpr_typeof()*
	カーソル下の型情報を |balloon-eval| で表示するための関数です。
	表示される情報は |::SnowdropEchoTypeof| と同等です。
	|bexpr| に設定を行い使用します。
Example: >
	set bexpr=snowdrop#ballonexpr_typeof()
	set ballooneval
<


==============================================================================
設定						*snowdrop-setting*

------------------------------------------------------------------------------
snowdrop の変数					*snowdrop-variables*

g:snowdrop#libclang_path			*g:snowdrop#libclang_path*
	libclang へのパスを設定します。

Default: >
	let g:snowdrop#libclang_path = ""
<

g:snowdrop#libclang_file			*g:snowdrop#libclang_file*
	libclang のファイル名を設定します。

Example >
	let g:snowdrop#libclang_file = "liblibclang.dll"
<

g:snowdrop#include_paths			*g:snowdrop#include_paths*
	 |filetype| をキーとしたインクルードパスを辞書で設定します。
	 また、インクルードパスはこの変数に設定されている以外も 'path' を参照
	 します。

Example >
	let g:snowdrop#include_paths = {
	\	"cpp" : {
	\		"C:/cpp/boost",
	\		"C:/cpp/sprout",
	\	}
	\}
<
g:snowdrop#goto_definition_open_cmd	*g:snowdrop#goto_definition_open_cmd*
	|snowdrop#goto_cursor_definition()| で使用されるファイルを開くためのコ
	マンドを設定する
Default: >
	let g:snowdrop#goto_definition_open_cmd = "edit"
<

g:snowdrop#command_options		*g:snowdrop#command_options*
	|filetype| をキーとした Clang のコマンドオプションを設定する辞書です。
Example: >
	let g:snowdrop#command_options = {
	\	"cpp" : "-std=c++1y",
	\}
<

b:snowdrop_command_option			*b:snowdrop_command_option*
	バッファローカルに設定する Clang のコマンドオプションです。


==============================================================================
コンテキスト						*snowdrop-context*

						*snowdrop-context-filename*
filename		String		(Required)
			ファイル名

						*snowdrop-context-source*
source			String		(Required)
			ソースコード

						*snowdrop-context-option*
option			String		(Optional)
			Clang のコマンドオプション

==============================================================================
marching.vim						*snowdrop-marching*

|snowdrop.vim| を利用したコード補完を |marching.vim| で使用することができま
す。

- marching.vim - https://github.com/osyo-manga/vim-marching

|marching.vim| で |snowdrop.vim| を利用したコード補完を使用したい場合は下記の設定を
行って下さい。

Example: >
	let g:marching_backend = "snowdrop"
<

また、|snowdrop.vim| でコード補完を行う場合は補完中にキー入力は受け付けないの
で注意して下さい。
この実装を使用した場合、|marching.vim| は |reunions| と |vimproc| には依存しなくな
ります


==============================================================================
unite-sources					*snowdrop-unite-sources*

|snowdrop.vim| には |unite-sources| がいくつか付属しています。

						*unite-source-snowdrop/includes*
snowdrop/includes	カレントバッファのインクルードファイルの一覧を出力し
			ます。
			|:SnowdropEchoIncludes| と同等のものが出力されます。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
